(set! a 2)
(set! b 3)
(println a)
(println b)
(println 'a)
(println 'b)
(newline)

(set! a (lambda (x y) x))
(set! b (lambda (x y) y))
(println (a 1 2))
(println (b 1 2))
(println ((lambda () (set! x 1) (set! x 2) x)))
(newline)

(println (list 1 2 3))
(newline)

(set! unless (syntax (condition then else)
               (list 'if condition else then)))
(set! y 0)
(println y)
(unless t (set! y 1) (set! y 2))
(println y)
(newline)

(define a 1)
(println a)
(newline)

(println (and t t t))
(println (and t nil t))
(println (and 1 2 3))
(println (and))
(newline)

(println (progn 1 2 3))
(progn (set! a 2) (set! a 3) a)
(println (progn (set! c 2) (set! c 3) c))
(println a)
(newline)

(println (let ((a 1))
           (let ((a 2)
                 (b (+ a 100)))
             b)))
(newline)

(println (or nil 1 2))
(newline)

(println (let* ((a 1) 
                (b (+ a 1)))
           b))
(println (let ((a 1))
           (let* ((a 2)
                  (b (+ a 100)))
             b)))
(newline)

(letrec ((even? (lambda (n) 
                  (if (= n 0) t (odd? (- n 1)))))
         (odd? (lambda (n)
                 (if (= n 0) nil (even? (- n 1))))))
  (println (even? 12))
  (println (odd? 12))
  (println (even? 13))
  (println (odd? 13)))
